#include <Servo.h>
#include <math.h>

// Definisi jumlah data dan jumlah fitur
const int NUM_GESTURES = 8;
const int NUM_FEATURES = 21;
const int filterOrder = 4; // Orde filter


Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;
Servo servo5;

float sensorValues[filterOrder + 1] = {0};
int dataIndex = 0;

// Definisi dataset
double gestures[NUM_GESTURES][NUM_FEATURES] = {
    {0.05,0.1,0.14,0.18,0.22,0.22,0.21,0.21,0.21,0.21,0.39,0.64,0.74,0.77,0.79,0.61,0.36,0.27,0.25,0.24,0.25}, // Gesture 1: cool
    {0.04,0.08,0.11,0.15,0.19,0.19,0.19,0.19,0.19,0.35,0.55,0.72,0.89,1,0.92,0.82,0.7,0.57,0.51,0.5,0.44}, // Gesture 2: spiderman
    {0.1,0.19,0.26,0.31,0.37,0.32,0.27,0.26,0.26,0.37,0.58,0.82,1.05,1.27,1.25,1.11,0.94,0.71,0.55,0.47,0.4}, // Gesture 3: 3 pew
    {0.05,0.09,0.14,0.2,0.25,0.25,0.25,0.25,0.24,0.24,0.37,0.44,0.45,0.45,0.43,0.3,0.22,0.2,0.19,0.19,0.19},  // Gesture 4: 4 tengah
    {0.18,0.18,0.18,0.19,0.19,0.18,0.19,0.19,0.19,0.18,0.18,0.18,0.18,0.19,0.19,0.18,0.19,0.19,0.19,0.18,0.18}, // Gesture 5: 5 terbuka
    {0.19,0.19,0.25,0.84,1.17,2.1,2.31,1.95,1.53,1.34,1.12,1.08,1.01,1.07,1.23,1.09,1.15,0.74,0.5,0.35,0.28}, // Gesture 6 : 6 Genggam
    {0.18,0.19,0.47,0.45,0.42,0.37,0.35,0.31,0.31,0.32,0.33,0.34,0.3,0.3,0.3,0.28,0.27,0.23,0.21,0.19,0.19}, // Gesture 7 : 7 oke tengah
    {0.19,0.19,0.58,1.24,1.29,1.31,1.09,0.99,0.92,0.88,0.88,0.76,0.72,0.66,0.63,0.6,0.52,0.48,0.46,0.35,0.29} // Gesture 8 : 8 Sip
};

// Fungsi untuk menghitung jarak Euclidean antara dua vektor
double euclideanDistance(const double a[], const double b[], int length) {
    double sum = 0.0;
    for (int i = 0; i < length; ++i) {
        sum += pow((a[i] - b[i]), 2);
    }
    return sqrt(sum);
}

// Fungsi untuk melakukan klasifikasi menggunakan k-NN
int classifyGesture(const double input[], int k, double distances[]) {
    // Hitung jarak Euclidean antara input dan setiap data latih
    for (int i = 0; i < NUM_GESTURES; ++i) {
        distances[i] = euclideanDistance(input, gestures[i], NUM_FEATURES);
    }

    // Temukan kategori terdekat
    int minIndex = 0;
    for (int i = 1; i < NUM_GESTURES; ++i) {
        if (distances[i] < distances[minIndex]) {
            minIndex = i;
        }
    }

    return minIndex + 1; // Mengembalikan indeks yang sesuai dengan kategori gerakan
}

void setup() {
  Serial.begin(9600);

  servo1.attach(2); // Assign servo pin numbers
  servo2.attach(3);
  servo3.attach(4);
  servo4.attach(5);
  servo5.attach(6);
}

void loop() {
  // Contoh penggunaan: klasifikasi data baru
  double newData[NUM_FEATURES];
    for (int i = 0; i < NUM_FEATURES; ++i) {
        int sensorValue = analogRead(A0); // Ubah A0 menjadi pin tempat sensor EMG terhubung

        // Konversi nilai ADC ke tegangan
        float voltage = (sensorValue * 5.0) / 1023; // 5V sebagai tegangan referensi

        // Memperbarui array nilai sensor dengan nilai tegangan
        for (int j = filterOrder; j > 0; j--) {
            sensorValues[j] = sensorValues[j - 1];
        }

        sensorValues[0] = voltage;

        // Hitung hasil filter Butterworth
        float filteredValue = 0;
        for (int j = 0; j <= filterOrder; j++) {
            filteredValue += sensorValues[j];
        }

        filteredValue /= (filterOrder + 1);

        // Simpan nilai yang telah difilter ke dalam newData
        newData[i] = filteredValue;

        // Tunggu sebentar antara pembacaan untuk stabilitas
        delay(10);
    }
  int k = 3;

  double distances[NUM_GESTURES];
  int classifiedGesture = classifyGesture(newData, k, distances);

  // Tampilkan hasil klasifikasi dan perhitungan jarak Euclidean
  Serial.print("Data baru diklasifikasikan sebagai Gesture ");
  Serial.println(classifiedGesture);

  // Gunakan hasil klasifikasi untuk menggerakkan servo
  moveServos(classifiedGesture);

  // Tambahkan penundaan atau logika lain sesuai kebutuhan Anda
  delay(2000);
}

void moveServos(int gesture) {
  // Sesuaikan gerakan servo berdasarkan hasil klasifikasi
  switch (gesture) {
    case 1: // Gesture 1: cool
      // Atur posisi servo untuk Gesture 1
      servo1.write(0);
      servo2.write(120);
      servo3.write(160);
      servo4.write(120);
      servo5.write(0);
      break;
    case 2: // Gesture 2: spiderman
      // Atur posisi servo untuk Gesture 2
      servo1.write(0);
      servo2.write(0);
      servo3.write(160);
      servo4.write(120);
      servo5.write(0);
      break;
    case 3: // Gesture 3: 3 pew
      // Atur posisi servo untuk Gesture 3
      servo1.write(0);
      servo2.write(120);
      servo3.write(160);
      servo4.write(120);
      servo5.write(120);
      break;
    case 4: // Gesture 4: 4 tengah
      // Atur posisi servo untuk Gesture 4
      servo1.write(0);
      servo2.write(0);
      servo3.write(160);
      servo4.write(0);
      servo5.write(0);
      // Tidak melakukan apa pun jika hasil klasifikasi tidak valid
      break;
    case 5: // Gesture 5: 5 Terbuka
      // Atur posisi servo untuk Gesture 5
      servo1.write(0);
      servo2.write(0);
      servo3.write(0);
      servo4.write(0);
      servo5.write(0);
      // Tidak melakukan apa pun jika hasil klasifikasi tidak valid
      break;
    case 6: // Gesture 6: 6 genggam
      // Atur posisi servo untuk Gesture 6
      servo1.write(120);
      servo2.write(120);
      servo3.write(160);
      servo4.write(120);
      servo5.write(120);
      // Tidak melakukan apa pun jika hasil klasifikasi tidak valid
      break;
    case 7: // Gesture 7: 7 oke tengah
      // Atur posisi servo untuk Gesture 7
      servo1.write(120);
      servo2.write(120);
      servo3.write(160);
      servo4.write(0);
      servo5.write(0);
      // Tidak melakukan apa pun jika hasil klasifikasi tidak valid
      break;
    case 8: // Gesture 8: 8 sip
      // Atur posisi servo untuk Gesture 8
      servo1.write(0);
      servo2.write(120);
      servo3.write(160);
      servo4.write(120);
      servo5.write(120);
      // Tidak melakukan apa pun jika hasil klasifikasi tidak valid
      break;
  }
}
